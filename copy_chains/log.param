#-----CLASS v2.4.5 (branch: no_slip, hash: 5a55ab64144c5047d791aa31c99b7b67ad552201)-----

#-----CLASS v2.4.4 (branch: hi_class, hash: 08dadaeafa2e77142b80bb3d7ff2c49cf7875f6b)-----
# This is for no slip gravity
# Specifically with the lite nuisance parameters.
#------Experiments to test (separated with commas)-----

data.experiments=['Planck_highl_lite','Planck_lowl','Planck_lensing']

#------ Settings for the over-sampling. The first element will always be set to
# 1, for it is the sampling of the cosmological parameters. The other numbers
# describe the over sampling of the nuisance parameter space. This array must
# have the same dimension as the number of blocks in your run (so, 1 for
# cosmological parameters, and then 1 for each experiment with varying nuisance
# parameters).
data.over_sampling=[1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'derived', or 'nuisance'

# Cosmological parameters list

data.parameters['omega_b']      = [ 2.2253, None, None,  0.028,  0.01, 'cosmo']
data.parameters['omega_cdm']    = [0.11919, None, None, 0.0027,     1, 'cosmo']
data.parameters['H0']           = [ 67.802, None, None,    1.2,     1, 'cosmo']
data.parameters['A_s']          = [ 2.2177,   0., None,  0.055, 1.e-9, 'cosmo']
data.parameters['n_s']          = [0.96229,   0., None, 0.0074,     1, 'cosmo']
data.parameters['tau_reio']     = [0.09463,   0., None,  0.013,     1, 'cosmo']

# BS-alphas: kineticity, braiding, running, tensors, M2_ini
data.cosmo_arguments['gravity_model'] = 'no_slip'
# This is c_k, set to 0
data.parameters['parameters_smg__1'] = [0.,  None, None,  0., 1, 'cosmo'] 
# This is c_m, so we should vary over it!
# Choose initially 0.05 and sigma = 0.1. Set lower bound at 0 for stability.
data.parameters['parameters_smg__2'] = [0.03,  0.,  None, 0.01, 1, 'cosmo'] 
# This is a_t, set to 0.5.
data.parameters['parameters_smg__3'] = [0.5, None, None,  0., 1, 'cosmo'] 
# This is tau, set to 1.
data.parameters['parameters_smg__4'] = [1.0, None, None,  0., 1, 'cosmo']
# This is M_*,ini, set to 1.
data.parameters['parameters_smg__5'] = [1.0, None, None,  0., 1, 'cosmo'] 

# Expansion history: Omega_0, w, Omega_ede
data.cosmo_arguments['expansion_model'] = 'lcdm'
# As in hi_class:
# 1) no cosmological constant, no fluid DE and 2) close up the universe with scalar field (smg)
data.cosmo_arguments['Omega_Lambda'] = 0.
data.cosmo_arguments['Omega_fld'] = 0.
data.cosmo_arguments['Omega_smg'] = -1.

#conservative precision parameters for the run
data.cosmo_arguments['start_small_k_at_tau_c_over_tau_h'] = 1e-4
data.cosmo_arguments['start_large_k_at_tau_h_over_tau_k'] = 1e-4
data.cosmo_arguments['perturb_sampling_stepsize'] = 0.05
data.cosmo_arguments['l_logstep'] = 1.045
data.cosmo_arguments['l_linstep'] = 50
data.cosmo_arguments['kineticity_safe_smg'] = 1.e-5
# This is added in:
data.cosmo_arguments['cs2_safe_smg'] = 1.e-10

# Nuisance parameter list, same call, except the name does not have to be a class name

#data.parameters['A_cib_217']         = [     61,    0,  200,     7,     1,'nuisance']   
#data.parameters['cib_index']         = [   -1.3, -1.3, -1.3,     0,     1,'nuisance']   
#data.parameters['xi_sz_cib']         = [   0.13,    0,    1,   0.3,     1,'nuisance']	 
#data.parameters['A_sz']              = [   6.86,    0,   10,   1.9,     1,'nuisance'] 			      
#data.parameters['ps_A_100_100']      = [  222.9,    0,  400,    30,     1,'nuisance'] 			      
#data.parameters['ps_A_143_143']      = [     38,    0,  400,     8,     1,'nuisance'] 			      
#data.parameters['ps_A_143_217']      = [   35.2,    0,  400,    10,     1,'nuisance'] 			      
#data.parameters['ps_A_217_217']      = [  102.6,    0,  400,    11,     1,'nuisance'] 			      
#data.parameters['ksz_norm']          = [      0,    0,   10,   4.2,     1,'nuisance'] 			      
#data.parameters['gal545_A_100']      = [   6.75,    0,   50,   1.8,     1,'nuisance']   
#data.parameters['gal545_A_143']      = [   9.41,    0,   50,   1.8,     1,'nuisance']   
#data.parameters['gal545_A_143_217']  = [  19.28,    0,  100,   4.2,     1,'nuisance']   
#data.parameters['gal545_A_217']      = [   81.7,    0,  400,   7.9,     1,'nuisance']   
#data.parameters['calib_100T']        = [ 998.59,    0, 3000,  0.73, 0.001,'nuisance']  
#data.parameters['calib_217T']        = [ 995.89,    0, 3000,   1.4, 0.001,'nuisance']  
data.parameters['A_planck']          = [100.028,   90,  110,  0.25,  0.01,'nuisance']  

# Derived parameters

data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
#data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
#data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
#data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [1, None, None, 0,     1,   'derived']

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611

# These two are required to get sigma8 as a derived parameter 
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

# Other fixed things:
data.cosmo_arguments['k_pivot'] = 0.05
# To agree with CAMB
#data.cosmo_arguments['reionization_width']=0.5
#------ Mcmc parameters ----

data.N=10
data.write_step=5


#-----Likelihood-Planck_highl_lite-----
Planck_highl_lite.path_clik = '/scratch1/scratchdirs/micbru/NoSlip/planck/plc-2.0/../plc_2.0/hi_l/plik_lite/plik_lite_v18_TT.clik'
Planck_highl_lite.A_planck_prior_center = 1
Planck_highl_lite.A_planck_prior_variance = 0.0025


#-----Likelihood-Planck_lowl-----
Planck_lowl.path_clik = '/scratch1/scratchdirs/micbru/NoSlip/planck/plc-2.0/../plc_2.0/low_l/bflike/lowl_SMW_70_dx11d_2014_10_03_v5c_Ap.clik'


#-----Likelihood-Planck_lensing-----
Planck_lensing.path_clik = '/scratch1/scratchdirs/micbru/NoSlip/planck/plc-2.0/../plc_2.0/lensing/smica_g30_ftl_full_pp.clik_lensing'


#-----------Cosmological-arguments---------
data.cosmo_arguments.update({'start_small_k_at_tau_c_over_tau_h': 0.0001, 'P_k_max_h/Mpc': 1.0, 'expansion_model': 'lcdm', 'output': 'mPk tCl lCl pCl ', 'N_ur': 2.0328, 'Omega_Lambda': 0.0, 'cs2_safe_smg': 1e-10, 'Omega_fld': 0.0, 'gravity_model': 'no_slip', 'Omega_smg': -1.0, 'l_max_scalars': 2508, 'start_large_k_at_tau_h_over_tau_k': 0.0001, 'l_linstep': 50, 'l_logstep': 1.045, 'm_ncdm': 0.06, 'N_ncdm': 1, 'kineticity_safe_smg': 1e-05, 'T_ncdm': 0.71611, 'lensing': ' yes ', 'k_pivot': 0.05, 'perturb_sampling_stepsize': 0.05})


#--------Default-Configuration------
data.path['cosmo']	= '/scratch1/scratchdirs/micbru/NoSlip/hi_class_public'
data.path['root']	= '/scratch1/scratchdirs/micbru/NoSlip/montepython_public'
data.path['data']	= '/scratch1/scratchdirs/micbru/NoSlip/montepython_public/data'
data.path['clik']	= '/scratch1/scratchdirs/micbru/NoSlip/planck/plc-2.0'
data.path['MontePython']	= '/scratch1/scratchdirs/micbru/NoSlip/montepython_public/montepython'
